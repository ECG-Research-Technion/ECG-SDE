VQVAE(
  (enc_b): Encoder(
    (blocks): Sequential(
      (0): Conv1d(2, 64, kernel_size=(3,), stride=(1,), padding=(1,))
      (1): SiLU(inplace=True)
      (2): Conv1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
      (3): SiLU(inplace=True)
      (4): Conv1d(128, 128, kernel_size=(4,), stride=(2,), padding=(1,))
      (5): SiLU(inplace=True)
      (6): Conv1d(128, 64, kernel_size=(3,), stride=(1,), padding=(1,))
      (7): SiLU(inplace=True)
      (8): Conv1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
      (9): SiLU(inplace=True)
      (10): Conv1d(128, 128, kernel_size=(4,), stride=(2,), padding=(1,))
      (11): SiLU(inplace=True)
      (12): Conv1d(128, 64, kernel_size=(3,), stride=(1,), padding=(1,))
      (13): SiLU(inplace=True)
      (14): ResBlockEnc(
        (conv): Sequential(
          (0): Conv1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): SiLU(inplace=True)
          (2): Conv1d(128, 64, kernel_size=(1,), stride=(1,))
          (3): SiLU(inplace=True)
        )
      )
      (15): ResBlockEnc(
        (conv): Sequential(
          (0): Conv1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): SiLU(inplace=True)
          (2): Conv1d(128, 64, kernel_size=(1,), stride=(1,))
          (3): SiLU(inplace=True)
        )
      )
      (16): ResBlockEnc(
        (conv): Sequential(
          (0): Conv1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): SiLU(inplace=True)
          (2): Conv1d(128, 64, kernel_size=(1,), stride=(1,))
          (3): SiLU(inplace=True)
        )
      )
      (17): ResBlockEnc(
        (conv): Sequential(
          (0): Conv1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): SiLU(inplace=True)
          (2): Conv1d(128, 64, kernel_size=(1,), stride=(1,))
          (3): SiLU(inplace=True)
        )
      )
      (18): ResBlockEnc(
        (conv): Sequential(
          (0): Conv1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): SiLU(inplace=True)
          (2): Conv1d(128, 64, kernel_size=(1,), stride=(1,))
          (3): SiLU(inplace=True)
        )
      )
      (19): ResBlockEnc(
        (conv): Sequential(
          (0): Conv1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): SiLU(inplace=True)
          (2): Conv1d(128, 64, kernel_size=(1,), stride=(1,))
          (3): SiLU(inplace=True)
        )
      )
      (20): ResBlockEnc(
        (conv): Sequential(
          (0): Conv1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): SiLU(inplace=True)
          (2): Conv1d(128, 64, kernel_size=(1,), stride=(1,))
          (3): SiLU(inplace=True)
        )
      )
      (21): ResBlockEnc(
        (conv): Sequential(
          (0): Conv1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): SiLU(inplace=True)
          (2): Conv1d(128, 64, kernel_size=(1,), stride=(1,))
          (3): SiLU(inplace=True)
        )
      )
      (22): ResBlockEnc(
        (conv): Sequential(
          (0): Conv1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): SiLU(inplace=True)
          (2): Conv1d(128, 64, kernel_size=(1,), stride=(1,))
          (3): SiLU(inplace=True)
        )
      )
      (23): ResBlockEnc(
        (conv): Sequential(
          (0): Conv1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): SiLU(inplace=True)
          (2): Conv1d(128, 64, kernel_size=(1,), stride=(1,))
          (3): SiLU(inplace=True)
        )
      )
      (24): ResBlockEnc(
        (conv): Sequential(
          (0): Conv1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): SiLU(inplace=True)
          (2): Conv1d(128, 64, kernel_size=(1,), stride=(1,))
          (3): SiLU(inplace=True)
        )
      )
      (25): ResBlockEnc(
        (conv): Sequential(
          (0): Conv1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): SiLU(inplace=True)
          (2): Conv1d(128, 64, kernel_size=(1,), stride=(1,))
          (3): SiLU(inplace=True)
        )
      )
      (26): ResBlockEnc(
        (conv): Sequential(
          (0): Conv1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): SiLU(inplace=True)
          (2): Conv1d(128, 64, kernel_size=(1,), stride=(1,))
          (3): SiLU(inplace=True)
        )
      )
      (27): ResBlockEnc(
        (conv): Sequential(
          (0): Conv1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): SiLU(inplace=True)
          (2): Conv1d(128, 64, kernel_size=(1,), stride=(1,))
          (3): SiLU(inplace=True)
        )
      )
      (28): ResBlockEnc(
        (conv): Sequential(
          (0): Conv1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): SiLU(inplace=True)
          (2): Conv1d(128, 64, kernel_size=(1,), stride=(1,))
          (3): SiLU(inplace=True)
        )
      )
    )
  )
  (quantize_conv_b): Conv1d(64, 512, kernel_size=(1,), stride=(1,))
  (quantize_b): Quantize()
  (fix_channels): Conv1d(512, 64, kernel_size=(1,), stride=(1,))
  (dec): Decoder(
    (blocks): Sequential(
      (0): ResBlockDec(
        (conv): Sequential(
          (0): ConvTranspose1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): SiLU(inplace=True)
          (2): ConvTranspose1d(128, 64, kernel_size=(1,), stride=(1,))
          (3): SiLU(inplace=True)
        )
      )
      (1): ResBlockDec(
        (conv): Sequential(
          (0): ConvTranspose1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): SiLU(inplace=True)
          (2): ConvTranspose1d(128, 64, kernel_size=(1,), stride=(1,))
          (3): SiLU(inplace=True)
        )
      )
      (2): ResBlockDec(
        (conv): Sequential(
          (0): ConvTranspose1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): SiLU(inplace=True)
          (2): ConvTranspose1d(128, 64, kernel_size=(1,), stride=(1,))
          (3): SiLU(inplace=True)
        )
      )
      (3): ResBlockDec(
        (conv): Sequential(
          (0): ConvTranspose1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): SiLU(inplace=True)
          (2): ConvTranspose1d(128, 64, kernel_size=(1,), stride=(1,))
          (3): SiLU(inplace=True)
        )
      )
      (4): ResBlockDec(
        (conv): Sequential(
          (0): ConvTranspose1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): SiLU(inplace=True)
          (2): ConvTranspose1d(128, 64, kernel_size=(1,), stride=(1,))
          (3): SiLU(inplace=True)
        )
      )
      (5): ResBlockDec(
        (conv): Sequential(
          (0): ConvTranspose1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): SiLU(inplace=True)
          (2): ConvTranspose1d(128, 64, kernel_size=(1,), stride=(1,))
          (3): SiLU(inplace=True)
        )
      )
      (6): ResBlockDec(
        (conv): Sequential(
          (0): ConvTranspose1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): SiLU(inplace=True)
          (2): ConvTranspose1d(128, 64, kernel_size=(1,), stride=(1,))
          (3): SiLU(inplace=True)
        )
      )
      (7): ResBlockDec(
        (conv): Sequential(
          (0): ConvTranspose1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): SiLU(inplace=True)
          (2): ConvTranspose1d(128, 64, kernel_size=(1,), stride=(1,))
          (3): SiLU(inplace=True)
        )
      )
      (8): ResBlockDec(
        (conv): Sequential(
          (0): ConvTranspose1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): SiLU(inplace=True)
          (2): ConvTranspose1d(128, 64, kernel_size=(1,), stride=(1,))
          (3): SiLU(inplace=True)
        )
      )
      (9): ResBlockDec(
        (conv): Sequential(
          (0): ConvTranspose1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): SiLU(inplace=True)
          (2): ConvTranspose1d(128, 64, kernel_size=(1,), stride=(1,))
          (3): SiLU(inplace=True)
        )
      )
      (10): ResBlockDec(
        (conv): Sequential(
          (0): ConvTranspose1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): SiLU(inplace=True)
          (2): ConvTranspose1d(128, 64, kernel_size=(1,), stride=(1,))
          (3): SiLU(inplace=True)
        )
      )
      (11): ResBlockDec(
        (conv): Sequential(
          (0): ConvTranspose1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): SiLU(inplace=True)
          (2): ConvTranspose1d(128, 64, kernel_size=(1,), stride=(1,))
          (3): SiLU(inplace=True)
        )
      )
      (12): ResBlockDec(
        (conv): Sequential(
          (0): ConvTranspose1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): SiLU(inplace=True)
          (2): ConvTranspose1d(128, 64, kernel_size=(1,), stride=(1,))
          (3): SiLU(inplace=True)
        )
      )
      (13): ResBlockDec(
        (conv): Sequential(
          (0): ConvTranspose1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): SiLU(inplace=True)
          (2): ConvTranspose1d(128, 64, kernel_size=(1,), stride=(1,))
          (3): SiLU(inplace=True)
        )
      )
      (14): ResBlockDec(
        (conv): Sequential(
          (0): ConvTranspose1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): SiLU(inplace=True)
          (2): ConvTranspose1d(128, 64, kernel_size=(1,), stride=(1,))
          (3): SiLU(inplace=True)
        )
      )
      (15): ConvTranspose1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
      (16): SiLU(inplace=True)
      (17): ConvTranspose1d(128, 128, kernel_size=(4,), stride=(2,), padding=(1,))
      (18): SiLU(inplace=True)
      (19): ConvTranspose1d(128, 64, kernel_size=(3,), stride=(1,), padding=(1,))
      (20): SiLU(inplace=True)
      (21): ConvTranspose1d(64, 128, kernel_size=(3,), stride=(1,), padding=(1,))
      (22): SiLU(inplace=True)
      (23): ConvTranspose1d(128, 128, kernel_size=(4,), stride=(2,), padding=(1,))
      (24): SiLU(inplace=True)
      (25): ConvTranspose1d(128, 64, kernel_size=(3,), stride=(1,), padding=(1,))
      (26): SiLU(inplace=True)
      (27): ConvTranspose1d(64, 2, kernel_size=(3,), stride=(1,), padding=(1,))
      (28): SiLU(inplace=True)
    )
  )
)
